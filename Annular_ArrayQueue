package 数据结构;
import java.util.Scanner;
//数组实现环形队列
public class ArrayQueue2 {
    public static void main(String[] args) {
        ArrayQueue2 queue1 = new ArrayQueue2(3);
        char key; //接收用户输入
        Scanner scanner = new Scanner(System.in);
        boolean loop = true;
        while (loop) {
            System.out.println("s(show): 显示队列");
            System.out.println("e(exit): 退出程序");
            System.out.println("a(add): 添加数据到队列");
            System.out.println("g(get): 从队列取出数据");
            System.out.println("h(head): 查看队列头的数据");
            key = scanner.next().charAt(0);//接收一个字符
            switch (key) {
                case 's':
                    queue1.showQueue();
                    break;
                case 'a':
                    System.out.println("输出一个数");
                    int value = scanner.nextInt();
                    queue1.addQueue(value);
                    break;
                case 'g': //取出数据
                    try {
                        int res = queue1.getQueue();
                        System.out.printf("取出的数据是%d\n", res);
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'h': //查看队列头的数据
                    try {
                        int res = queue1.headQueue();
                        System.out.printf("队列头的数据是%d\n", res);
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'e': //退出
                    scanner.close();
                    loop = false;
                    break;
            }
            System.out.println("程序退出！");
        }
    }
    private int maxSize;//队列最大存储元素
    private int front;//指向队列头部的前一个位置
    private int rear;//指向队列的尾部
    private int arr[];//存储队列元素的数组

    //构造方法
    public ArrayQueue2(int maxSize) {
        this.maxSize = maxSize;
        this.front = 0;
        this.rear = 0;
        this.arr = new int[maxSize];
    }

    //判断队列是否为满
    public boolean judgeFull() {
        return (rear + 1) % maxSize == front;
    }

    //判断队列是否为空
    public boolean judgeEmpty() {
        return front == rear;
    }

    //添加数据到队列
    public void addQueue(int n) {
        if (judgeFull()) {
            System.out.println("队列满，不能添加元素");
            return;
        } else {
            arr[rear] = n;
            rear=(rear+1)%maxSize;
        }
    }

    //取出队列元素
    public int getQueue() {
        if (judgeEmpty()) {
            throw new RuntimeException("队列空，不能取数据");
        } else {
            int value=arr[front];
            front=(front+1)%maxSize;
            return value;
        }
    }

    //显示队列所有元素
    public void showQueue() { // 遍历
        if (judgeEmpty()) {
            System.out.println("队列空的，没有数据");
            return;
        }
        for (int i = front; i < front+(maxSize+rear-front)%maxSize; i++) {
            System.out.printf("arr[%d]=%d\n", i%maxSize, arr[i%maxSize]);
        }
    }

    // 显示队列的头数据， 注意不是取出数据
    public int headQueue() {
        if (judgeEmpty()) {
            throw new RuntimeException("队列空的，没有数据~~");
        }
        return arr[front];
    }
}
